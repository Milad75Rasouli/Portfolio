// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.663
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Milad75Rasouli/portfolio/frontend/views/layouts"

func SignUp() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = layouts.Base("Sign Up", `
    <div class="b-content-divider b-content-divider-day b-content-vr col">
    <div class="container h-100">
    <div class="row h-100 align-hv-center">
        <div class="main-form text-start">
        <div class="card-header text-center border-bottom border-3 border-light">
            <h1>Sign up</h1>
        </div>
        <div class="card-body">
            <form id="signup-form" action="/sign-up" method="post">
                <div class="form-group mt-2">
                    <label for="fullname">Full Name:</label>
                    <input type="text" class="form-control form-control-day bg-light border-secondary text-dark" id="fullname" name="fullname" placeholder="Full Name" required>
                </div>
                <div class="form-group mt-2">
                    <label for="email">Email:</label>
                    <input type="email" class="form-control form-control-day bg-light border-secondary text-dark" id="email" name="email" placeholder="Email" required>
                </div>
                <div class="form-group mt-2">
                    <label for="password">Password:</label>
                    <input type="password" class="form-control form-control-day bg-light border-secondary text-dark" id="password" name="password" placeholder="Password" required>
                    <div id="password-strength" class="progress mt-2">
                        <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    <div id="password-error" class="mt-2"></div>
                </div>
                <div class="form-group mt-2">
                    <label for="confirm-password">Confirm Password:</label>
                    <input type="password" class="form-control form-control-day bg-light border-secondary text-dark" id="confirm-password" placeholder="Confirm Password" required>
                    <div id="password-match" class="mt-2"></div>
                </div>
                <button type="submit" class="btn btn-dark float-start">Sign up</button>
                <!-- <button type="button" class="btn btn-dark float-end">Sign up with Github</button> -->
            </form>
        </div>
    </div>
    </div>
    </div>
    </div>
    <script>
    document.getElementById('password').addEventListener('input', function() {
        var strength = this.value.length;
        var progressBar = document.querySelector('#password-strength .progress-bar');
        progressBar.style.width = strength * 10 + '%';
        progressBar.classList.remove('progress-bar-weak', 'progress-bar-medium', 'progress-bar-strong');
        if (strength < 4) {
            progressBar.classList.add('progress-bar-weak');
        } else if (strength >= 4 && strength < 8) {
            progressBar.classList.add('progress-bar-medium');
        } else if (strength >= 8) {
            progressBar.classList.add('progress-bar-strong');
        }
        document.getElementById('password-error').textContent = strength >= 8 ? '' : 'Password must be at least 8 characters.';
        document.getElementById('password-error').style.color = strength >= 8 ? 'green' : 'red';
    });

    document.getElementById('confirm-password').addEventListener('input', function() {
        var match = this.value === document.getElementById('password').value;
        document.getElementById('password-match').textContent = match ? '' : 'Passwords do not match';
        document.getElementById('password-match').style.color = match ? 'green' : 'red';
    });

    document.getElementById('signup-form').addEventListener('submit', function(e) {
        e.preventDefault();
        var password = document.getElementById('password').value;
        var confirmPassword = document.getElementById('confirm-password').value;
        if (password.length < 8 || password !== confirmPassword) {
            document.getElementById('password-error').textContent = 'Password must be at least 8 characters.';
            document.getElementById('password-match').textContent = 'Passwords do not match';
            document.getElementById('password-error').style.color = 'red';
            document.getElementById('password-match').style.color = 'red';
            return;
        }
        var formData = {
            fullname: document.getElementById('fullname').value,
            email: document.getElementById('email').value,
            password: password
        };
        fetch('/user/sign-up', {
            method: 'POST',
            redirect:"follow",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url; // Redirect to the new URL
            } else {
                return response.json();
            }
        })
        .then(data => {
            if (data.message) {
                var notification = document.getElementById('notification');
                notification.textContent = data.message;
                notification.style.display = 'block';
                setTimeout(function() {
                    notification.style.display = 'none';
                }, 5000);
            } else {
                // Handle success
            }
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    });
</script>`).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
